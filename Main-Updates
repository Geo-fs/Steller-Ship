//v1.04 IRL v1.09

#include <iostream>
#include <string>
#include <chrono>
#include <map> 
#include <thread>
#include <cctype>
#include <vector>
#include <utility> 
#include <random>
#ifdef _WIN32
#include <windows.h>
#else
#include <cstdlib>
#endif

void delay(int seconds) {
    std::this_thread::sleep_for(std::chrono::seconds(seconds));
}

void clearConsole() {
#ifdef _WIN32
    // For Windows
    HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    DWORD count;
    DWORD cellCount;
    COORD homeCoords = { 0, 0 };

    if (hStdOut == INVALID_HANDLE_VALUE) return;

    if (!GetConsoleScreenBufferInfo(hStdOut, &csbi)) return;
    cellCount = csbi.dwSize.X * csbi.dwSize.Y;

    if (!FillConsoleOutputCharacter(
        hStdOut, 
        (TCHAR)' ', 
        cellCount, 
        homeCoords, 
        &count
    )) return;

    if (!FillConsoleOutputAttribute(
        hStdOut, 
        csbi.wAttributes, 
        cellCount, 
        homeCoords, 
        &count
    )) return;

    SetConsoleCursorPosition(hStdOut, homeCoords);
#else
    // For Unix-like systems (Linux, macOS)
    std::system("clear");
#endif
}

class tools {
public:
    const char toUpperCase(const char& c) {
        return std::toupper(c);
    }
    
    std::string toupperstring(std::string& str) {
        std::string temp;
        for(const auto& s : str) {
            temp += toUpperCase(s);
        }
        return temp;
    }
};

//type
//break

class PlanetElement {
public:
    PlanetElement(const std::string& name, const std::vector<std::pair<std::string, int>>& options)
        : name(name), options(options) {}

    std::string getName() const { return name; }
    const std::vector<std::pair<std::string, int>>& getOptions() const { return options; }

private:
    std::string name;
    std::vector<std::pair<std::string, int>> options;
};

class PlanetElements {
public:
    PlanetElements() {
        elements.emplace_back("Biome", std::vector<std::pair<std::string, int>>{
            {"Desert", 1},
            {"Jungle", 2},
            {"Ocean", 3},
            {"Tundra", 4},
            {"Mountain", 5},
            {"Forest", 6},
            {"Volcanic", 7},
            {"Cratered", 8},
            {"Dead", 9}
        });
        elements.emplace_back("Atmosphere", std::vector<std::pair<std::string, int>>{
            {"Breathable", 1},
            {"Toxic", 2},
            {"None", 3}
        });
        elements.emplace_back("Life", std::vector<std::pair<std::string, int>>{
            {"Yes", 1},
            {"No", 2}
        });
        elements.emplace_back("Civilization", std::vector<std::pair<std::string, int>>{
            {"Yes", 1},
            {"No", 2}
        });
    }

    const PlanetElement& getElement(const std::string& name) const {
        for (const auto& element : elements) {
            if (element.getName() == name) {
                return element;
            }
        }
        throw std::runtime_error("Element not found");
    }

    int getValueForOption(const std::string& elementName, const std::string& optionName) const {
        const PlanetElement& element = getElement(elementName);
        for (const auto& option : element.getOptions()) {
            if (option.first == optionName) {
                return option.second;
            }
        }
        throw std::runtime_error("Option not found");
    }

private:
    std::vector<PlanetElement> elements;
};

//break

class gameNumber {
private: 
    std::string shipName;
    std::vector<std::string> inventory;
    int xp;
    std::random_device rd;
    std::mt19937 gen;
    int roundCount;
    PlanetElements planetElements;

    std::string generatePlanetName() {
        const std::string consonants = "bcdfghjklmnpqrstvwxyz";
        const std::string vowels = "aeiou";
        std::string name;
        for (int i = 0; i < 5; ++i) {
            name += (i % 2 == 0) ? consonants[gen() % consonants.length()] : vowels[gen() % vowels.length()];
        }
        return name;
    }

    std::vector<std::string> possibleItems = {
        "Laser Cannon", "Shield Generator", "Hyperdrive Booster", "Repair Nanobots", 
        "Cloaking Device", "Tractor Beam", "Energy Capacitor", "Quantum Scanner", 
        "Plasma Torpedo", "Gravity Manipulator", "Antimatter Reactor", "Wormhole Generator", 
        "Ion Thruster", "Nebula Compass", "Stellar Mapper", "Asteroid Drill", 
        "Fusion Reactor", "Cosmic Ray Deflector", "Subspace Communicator", "Stasis Field Projector"
    };
    
    std::string getRandomItem() {
        return possibleItems[gen() % possibleItems.size()];
    }

    std::pair<std::string, int> getRandomElement(const std::string& elementName) {
        const PlanetElement& element = planetElements.getElement(elementName);
        const auto& options = element.getOptions();
        size_t index = gen() % options.size();
        return options[index];
    }

    bool getRandomChance(double probability) {
        return std::uniform_real_distribution<>(0, 1)(gen) < probability;
    }

    void addToInventory(const std::string& item) {
        if (inventory.size() < 9) {
            inventory.push_back(item);
        } else {
            std::cout << "Inventory full. Do you want to replace an item? (Y/N): ";
            std::string response;
            std::cin >> response;
            if (response == "Y" || response == "y") {
                std::cout << "Which slot do you want to replace? (1-9): ";
                int slot;
                std::cin >> slot;
                if (slot >= 1 && slot <= 9) {
                    inventory[slot - 1] = item;
                    std::cout << "Item replaced successfully.\n";
                } else {
                    std::cout << "Invalid slot. Item discarded.\n";
                }
            }
        }
    }

    void displayInventory() {
        std::cout << "INVENTORY: ";
        for (const auto& item : inventory) {
            std::cout << "[" << item << "] ";
        }
        std::cout << std::endl;
    }

    bool battleSequence() {
        int alienHealth = 100;
        int playerHealth = 100;
        
        std::cout << "Battle initiated! Your health: " << playerHealth << ", Alien health: " << alienHealth << "\n";
        
        while (alienHealth > 0 && playerHealth > 0) {
            std::cout << "\nChoose your action:\n";
            std::cout << "1. Attack\n";
            std::cout << "2. Defend\n";
            std::cout << "3. Use Item\n";
            
            int choice;
            std::cin >> choice;
            
            int damage;
            switch(choice) {
                case 1:
                    damage = gen() % 20 + 10;
                    alienHealth -= damage;
                    std::cout << "You dealt " << damage << " damage to the alien!\n";
                    break;
                case 2:
                    std::cout << "You brace for the alien's attack.\n";
                    break;
                case 3:
                    if (!inventory.empty()) {
                        std::cout << "Choose an item to use:\n";
                        for (size_t i = 0; i < inventory.size(); ++i) {
                            std::cout << i+1 << ". " << inventory[i] << "\n";
                        }
                        int itemChoice;
                        std::cin >> itemChoice;
                        if (itemChoice > 0 && itemChoice <= static_cast<int>(inventory.size())) {
                            std::cout << "You used " << inventory[itemChoice-1] << "!\n";
                            if (inventory[itemChoice-1] == "Repair Nanobots") {
                                int heal = gen() % 30 + 20;
                                playerHealth = std::min(100, playerHealth + heal);
                                std::cout << "You healed " << heal << " health!\n";
                            } else {
                                damage = gen() % 30 + 20;
                                alienHealth -= damage;
                                std::cout << "You dealt " << damage << " damage to the alien!\n";
                            }
                            inventory.erase(inventory.begin() + itemChoice - 1);
                        } else {
                            std::cout << "Invalid item choice.\n";
                        }
                    } else {
                        std::cout << "You have no items to use!\n";
                    }
                    break;
                default:
                    std::cout << "Invalid choice. You hesitated and lost your turn!\n";
            }
            
            if (alienHealth <= 0) {
                std::cout << "You defeated the alien!\n";
                xp += 200;
                std::cout << "You gained 200 XP!\n";
                return true;
            }
            
            // Alien's turn
            if (choice == 2) {  // Player defended
                damage = gen() % 10 + 5;
            } else {
                damage = gen() % 20 + 10;
            }
            playerHealth -= damage;
            std::cout << "The alien attacks and deals " << damage << " damage to you!\n";
            
            std::cout << "Your health: " << playerHealth << ", Alien health: " << alienHealth << "\n";
        }
        
        if (playerHealth <= 0) {
            std::cout << "You were defeated by the alien.\n";
            return false;
        }
        
        return true;  // This line should never be reached, but it's here to satisfy the compiler
    }

public: 
    gameNumber() : xp(0), gen(rd()), roundCount(0) {
        shipName = "STELLER-SHIP"; // Can be customized in settings
        inventory.reserve(9);
    }

    bool mainGameLoop() {
        while (roundCount < 20) {
            clearConsole();
            std::cout << "Round " << roundCount + 1 << " of 20\n";
            std::cout << "You are hurtling through space on the " << shipName << ".\n";
            std::cout << "You come across a new planet!\n\n";

            std::string planetName = generatePlanetName();
            std::cout << "Outo Computer: Planet " << planetName << "!\n";
            std::cout << "Outo Computer: Do you want to initialize a scan of the planet? (Y/N): ";
            std::string response;
            std::cin >> response;

            if (response == "Y" || response == "y") {
                auto [biomeName, biomeValue] = getRandomElement("Biome");
                std::cout << "Outo Computer: Biome: " << biomeName << " (ID: " << biomeValue << ")\n";

                auto [atmosphereName, atmosphereValue] = getRandomElement("Atmosphere");
                std::cout << "Atmosphere: " << atmosphereName << " (ID: " << atmosphereValue << ")\n";

                auto [lifeName, lifeValue] = getRandomElement("Life");
                std::cout << "Life: " << lifeName << "\n";

                bool hasLife = (lifeName == "Yes");
                if (hasLife) {
                    auto [civilizationName, civilizationValue] = getRandomElement("Civilization");
                    std::cout << "Civilization: " << civilizationName << "\n";
                } else {
                    std::cout << "Civilization: No\n";
                }

                std::cout << "Resources: Level " << (gen() % 100 + 1) << "\n\n";

                std::cout << "Outo Computer: Do you want to land? (Y/N): ";
                std::cin >> response;

                if (response == "Y" || response == "y") {
                    std::cout << "Descending into the planet.\n";

                    if (hasLife && getRandomChance(0.1)) {
                        std::cout << "Outo Computer: Aliens are ATTACKING!!!! \n\nBATTLE STATIONS!\n";
                        std::cout << "Outo Computer: Do you want to do evasive maneuvers? (Y/N): ";
                        std::cin >> response;

                        if (response == "Y" || response == "y") {
                            std::cout << "Outo Computer: Hold on!\n";
                            delay(3);
                            if (!getRandomChance(0.25)) {
                                std::cout << "Your ship was destroyed.\n";
                                return false;
                            }
                            if (!battleSequence()) {
                                std::cout << "Game Over. Your ship was destroyed in battle.\n";
                                return false;
                            }
                        } else {
                            std::cout << "Your ship was destroyed.\n";
                            return false;
                        }
                    } else {
                        std::cout << "Outo Computer: Collecting resources!\n";
                        delay(3);
                        std::cout << "Done! You've earned 100 XP.\n";
                        xp += 100;
                        if (getRandomChance(0.05)) {
                            std::string newItem = getRandomItem();
                            std::cout << "You've found a " << newItem << "! Do you want to equip it? (Y/N): ";
                            std::cin >> response;
                            if (response == "Y" || response == "y") {
                                addToInventory(newItem);
                            }
                        }
                    }
                }
            }
            roundCount++;
            displayInventory();
            std::cout << "Current XP: " << xp << std::endl;
            std::cout << "Press Enter to continue...";
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            std::cin.get();
        }
        std::cout << "You've completed 20 rounds! Game over.\n";
        return true;
    }
};

   




class mainMenu {
public:
    void printMenu() {
        std::cout << " \n Welcome \n Press 1 For New Game \n Press 2 For Saved Game \n Press 3 For Settings \n Press 4 For Developer Tools \n Press 5 For The About Page \n";
    }
};

class newGameStart {
public:
    bool printStartOptions() {
        clearConsole();

        int selectedShip = 0;
        std::string shipNames[] = {"The Hyperbole", "The Riser-2", "The Sunrise", "Newark", "Winona"};
        std::string shipDescriptions[] = {
            "Fast, Nimble, Light Armor, Machine Guns.", 
            "Strong Shields, Laser Cannons, Slow, Hard To Turn", 
            "Medium Shields, Overpowered Engines, Small Cannons, Normally Slow", 
            "Quick, Small, Fast Engines, Light Guns", 
            "Laser Cannons, Fast Engines, No Shields, Quick"
        };

        while (true) {
            std::cout << "\n---------->>> STARTING <<<-----------\n";
            std::cout << "Press 1 Through 5 To Choose Your Starting Ship\n\n";

            for (int i = 0; i < 5; i++) {
                std::cout << i + 1 << ": " << shipNames[i] << " - " << shipDescriptions[i] << "\n";
            }

            std::cout << "\nPlease Select A Ship (1-5) or 0 to Exit: ";
            std::string input;
            std::cin >> input;

            if (input == "0") {
                std::cout << "Exiting ship selection...\n";
                delay(2);
                return false;
            }

            try {
                selectedShip = std::stoi(input);
                if (selectedShip >= 1 && selectedShip <= 5) {
                    std::cout << "\nYou have selected: " << shipNames[selectedShip - 1] << "\n";
                    std::cout << "Confirm selection? (Y/N): ";
                    std::cin >> input;
                    if (input == "Y" || input == "y") {
                        std::cout << "Ship confirmed! Preparing for launch...\n";
                        delay(2);
                        return true;
                    }
                } else {
                    std::cout << "Invalid selection. Please choose a number between 1 and 5.\n";
                }
            } catch (std::invalid_argument&) {
                std::cout << "Invalid input. Please enter a number.\n";
            }

            delay(2);
            clearConsole();
        }
    }
};

class GameManager {
private:
    mainMenu menu;
    newGameStart gameStart;
    gameNumber game;

public:
    void run() {
        while (true) {
            clearConsole();
            menu.printMenu();
            
            std::string mainMenuPrint;
            std::cin >> mainMenuPrint;
            
            try {
                int choice = std::stoi(mainMenuPrint);
                
                switch(choice) {
                    case 1:
                        if (gameStart.printStartOptions()) {
                            std::cout << "Starting the game...\n";
                            delay(2);
                            while (startGame()) {
                                std::cout << "Restarting game...\n";
                                delay(2);
                            }
                        }
                        break;
                    case 2:
                        std::cout << "Loading saved game...\n";
                        // Add code for loading a saved game
                        break;
                    case 3:
                        std::cout << "Opening settings...\n";
                        // Add code for settings
                        break;
                    case 4:
                        std::cout << "Accessing developer tools...\n";
                        // Add code for developer tools
                        break;
                        
                    case 5:
                        std::cout << "About page loading...\n";
                        //add code for the about page
                        break;
                        
                    default:
                        std::cout << "Invalid option. Please enter a number between 1 and 5.\n";
                }
            } catch (const std::invalid_argument& e) {
                std::cout << "Invalid input. Please enter a number.\n";
            } catch (const std::out_of_range& e) {
                std::cout << "Input out of range. Please enter a number between 1 and 4.\n";
            }
            
            delay(2);
        }
    }

private:
    bool startGame() {
        clearConsole();
        std::cout << "Initializing game systems...\n";
        delay(2);
        std::cout << "Preparing ship for launch...\n";
        delay(2);
        std::cout << "3...\n";
        delay(1);
        std::cout << "2...\n";
        delay(1);
        std::cout << "1...\n";
        delay(1);
        std::cout << "Liftoff!\n";
        delay(2);
        clearConsole();
        
        bool gameResult = game.mainGameLoop();
        
        if (!gameResult) {
            std::cout << "Game Over! Do you want to play again? (Y/N): ";
            std::string response;
            std::cin >> response;
            return (response == "Y" || response == "y");
        }
        
        return false;
    }
};



class intro {
public:
    void printIntro() {
        std::cout << "Skipping intro...\n";
        delay(2);
    }
    void printSkippedIntro() {
        std::cout << "Continuing with intro in 3 seconds...\n";
        delay(3);
        
        std::cout << "Starting Intro sequence...\n";
        delay(1);
        std::cout << "Preparing for launch...\n";
        delay(1);
        std::cout << "Welcome, in this game, the Y and N Keys will be the most used. \n The number keys will control your 10 inventory slots. \n";
        delay(1);
        std::cout << "To fire a weapon, you can press the F key. To drop bombs, you can press the B key.\n";
        delay(1);
        std::cout << "Get Ready For Liftoff! \n \n";
        delay(1);
        std::cout << "You Are A Space Explorer. You Pilot Your Trusty Ships With The Help Of The Outo Computer.\n";
        std::cout << "You Will Start As A Cadet And Slowly Make Your Way To General In The Space Alliance! \n";
        delay(1);
        std::cout << "When You Get To A Planet, Outo Will Ask You What You Want To Do.\n";
        std::cout << "Occasionally, You Will Be Greeted By Alien Ships. When This Happens, Quick Timing Is Key!\n";
        delay(1);
        
        clearConsole();
        
        std::cout << "Make Sure To Resize Your Game Console Window To The Center Of The Screen\n \n";
        delay(1);
        std::cout << "I Can't Stay Long.... Good Luck Cadet. \n We All Depend On You. \n Liftoff In: \n";
        delay(1);
        std::cout << "3...\n";
        delay(1);
        std::cout << "2...\n";
        delay(1);
        std::cout << "1...\n";
        delay(1);
        clearConsole();
        std::cout << "*Welcome To Space! I'm Outo The Computer. Lets Go!!! \n";
        delay(3);
    }
    void printMainIntro() {
        std::cout << "Downloading....\n" << std::endl;
    
        delay(1);
    
        std::cout << "Awaiting Input: \n" << std::endl;
    
        delay(1);
    
        std::string input;
        std::cin >> input;
    
        std::cout << "Starting: " << input << std::endl;
        delay(1);
        std::cout << "\n Welcome To STELLER-SHIP!!!\n" << std::endl;
        std::cout << "Press 'Y' and enter if you wish to skip the Intro. If not, press any other key and hit enter! Space Exploration Awaits!\n";
    }
};

tools g_tools;
intro g_intro;

int main() {
    g_intro.printMainIntro();
    
    std::string skipIntro;
    std::cin >> skipIntro;

    if (skipIntro == "Y" || skipIntro == "y") {
        g_intro.printIntro();
    } else {
        g_intro.printSkippedIntro();
    }

    std::cout << "Welcome aboard the STELLER-SHIP! Your space adventure begins now!\n";
    
    GameManager gameManager;
    gameManager.run();
    
    return 0;
}
    


