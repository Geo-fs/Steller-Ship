#include <iostream>
#include <string>
#include <chrono>
#include <thread>
#include <cctype>
#include <vector>
#include <random>
#ifdef _WIN32
#include <windows.h>
#else
#include <cstdlib>
#endif

//break

void delay(int seconds) {
    std::this_thread::sleep_for(std::chrono::seconds(seconds));
}
// \/\/\/ Console clearing function. Not for use yet.....
void clearConsole() {
#ifdef _WIN32
    // For Windows
    HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    DWORD count;
    DWORD cellCount;
    COORD homeCoords = { 0, 0 };

    if (hStdOut == INVALID_HANDLE_VALUE) return;

    if (!GetConsoleScreenBufferInfo(hStdOut, &csbi)) return;
    cellCount = csbi.dwSize.X * csbi.dwSize.Y;

    if (!FillConsoleOutputCharacter(
        hStdOut,
        (TCHAR)' ',
        cellCount,
        homeCoords,
        &count
    )) return;

    if (!FillConsoleOutputAttribute(
        hStdOut,
        csbi.wAttributes,
        cellCount,
        homeCoords,
        &count
    )) return;

    SetConsoleCursorPosition(hStdOut, homeCoords);
#else
    // For Unix-like systems (Linux, macOS)
    std::system("clear");
#endif
}
// Use clearConsole(); when calling this.
// break

class tools{
    public:
    
    
    
    
    const char toUpperCase(const char& c){
        return std::toupper(c);
    }
    
    std::string toupperstring(std::string& str) {
        // break
        std::string temp;
        for(const auto& s : str){
            temp += toUpperCase( s );
            
        }
        return temp;
    }
};

class gameNumber{
private:
    std::string shipName;
    std::vector<std::string> inventory;
    int xp;
    std::random_device rd;
    std::mt19937 gen;

    std::string generatePlanetName() {
        const std::string consonants = "bcdfghjklmnpqrstvwxyz";
        const std::string vowels = "aeiou";
        std::string name;
        for (int i = 0; i < 5; ++i) {
            name += (i % 2 == 0) ? consonants[gen() % consonants.length()] : vowels[gen() % vowels.length()];
        }
        return name;
    }

     std::vector<std::string> possibleItems = {
            "Laser Cannon", "Shield Generator", "Hyperdrive Booster", "Repair Nanobots",
            "Cloaking Device", "Tractor Beam", "Energy Capacitor", "Quantum Scanner",
            "Plasma Torpedo", "Gravity Manipulator", "Antimatter Reactor", "Wormhole Generator",
            "Ion Thruster", "Nebula Compass", "Stellar Mapper", "Asteroid Drill",
            "Fusion Reactor", "Cosmic Ray Deflector", "Subspace Communicator", "Stasis Field Projector"
        };
    
        std::string getRandomItem() {
            return possibleItems[gen() % possibleItems.size()];
        }





    std::string getRandomElement(const std::vector<std::string>& vec) {
        return vec[gen() % vec.size()];
    }

    bool getRandomChance(double probability) {
        return std::uniform_real_distribution<>(0, 1)(gen) < probability;
    }

    void addToInventory(const std::string& item) {
        if (inventory.size() < 9) {
            inventory.push_back(item);
        } else {
            std::cout << "Inventory full. Do you want to replace an item? (Y/N): ";
            std::string response;
            std::cin >> response;
            if (response == "Y" || response == "y") {
                std::cout << "Which slot do you want to replace? (1-9): ";
                int slot;
                std::cin >> slot;
                if (slot >= 1 && slot <= 9) {
                    inventory[slot - 1] = item;
                    std::cout << "Item replaced successfully.\n";
                } else {
                    std::cout << "Invalid slot. Item discarded.\n";
                }
            }
        }
    }

    void displayInventory() {
        std::cout << "INVENTORY: ";
        for (const auto& item : inventory) {
            std::cout << "[" << item << "] ";
        }
        std::cout << std::endl;
    }

public:
    gameNumber() : xp(0), gen(rd()) {
        shipName = "STELLER-SHIP"; // Can be customized in settings
        inventory.reserve(9);
    };

    void mainGameLoop() {
    while (true) {
        clearConsole();
        std::cout << "You are hurtling through space on the " << shipName << ".\n";
        std::cout << "You come across a new planet!\n\n";

        std::string planetName = generatePlanetName();
        std::cout << "Outo Computer: Planet " << planetName << "!\n";
        std::cout << "Outo Computer: Do you want to initialize a scan of the planet? (Y/N): ";
        std::string response;
        std::cin >> response;

        if (response == "Y" || response == "y") {
            std::cout << "Outo Computer: Biome: " << getRandomElement({"Desert", "Jungle", "Ocean", "Tundra", "Mountain", "Forest", "Volcanic", "Cratered", "Dead"}) << "\n";
            std::cout << "Atmosphere: " << getRandomElement({"Breathable", "Toxic", "None"}) << "\n";
            bool hasLife = getRandomChance(0.5);
            std::cout << "Life: " << (hasLife ? "Yes" : "No") << "\n";
            std::cout << "Civilization: " << (hasLife && getRandomChance(0.3) ? "Yes" : "No") << "\n";
            std::cout << "Resources: Level " << (gen() % 100 + 1) << "\n\n";

            std::cout << "Outo Computer: Do you want to land? (Y/N): ";
            std::cin >> response;

            if (response == "Y" || response == "y") {
                    std::cout << "Descending into the planet.\n";

                    if (hasLife && getRandomChance(0.1)) {
                        std::cout << "Outo Computer: Aliens are ATTACKING!!!! \n\nBATTLE STATIONS!\n";
                        std::cout << "Outo Computer: Do you want to do evasive maneuvers? (Y/N): ";
                        std::cin >> response;

                        if (response == "Y" || response == "y") {
                            std::cout << "Outo Computer: Hold on!\n";
                            delay(3);
                            if (getRandomChance(0.25)) {
                                std::cout << "Outo Computer: We made it! Do you want to leave or stay and try to take over? Stay (Y/N): ";
                                std::cin >> response;
                                if (response == "Y" || response == "y") {
                                    std::cout << "Outo Computer: Do you want to bomb the planet or explore for resources? Bomb (Y/N): ";
                                    std::cin >> response;
                                    if (response == "Y" || response == "y") {
                                        std::cout << "Outo Computer: Bombing...\n";
                                        delay(5);
                                        std::cout << "Done. You've earned 80 XP.\n";
                                        xp += 80;
                                    } else {
                                        std::cout << "Outo Computer: Exploring!\n";
                                        delay(5);
                                        std::cout << "Done! You've earned 50 XP.\n";
                                        xp += 50;
                                          if (getRandomChance(0.05)) {
                                           std::string newItem = getRandomItem();
                                             std::cout << "You've found a " << newItem << "! Do you want to equip it? (Y/N): ";
                                            std::string response;
                                           std::cin >> response;
                                            if (response == "Y" || response == "y") {
                                              addToInventory(newItem);
                }
            }
                                        }
                                    }
                                } else {
                                    xp += 10;
                                    std::cout << "You've earned 10 XP for surviving.\n";
                                }
                            } else {
                                std::cout << "Game Over! Your ship was destroyed.\n";
                                return;
                            }
                        } else {
                            std::cout << "Game Over! Your ship was destroyed.\n";
                            return;
                        }
                    } else {
                        std::cout << "Outo Computer: Collecting resources!\n";
                        delay(3);
                        std::cout << "Done! You've earned 100 XP.\n";
                        xp += 100;
                        if (getRandomChance(0.05)) {
                            std::string newItem = "New Item " + std::to_string(gen() % 20 + 1);
                            std::cout << "You've found a " << newItem << "! Do you want to equip it? (Y/N): ";
                            std::cin >> response;
                            if (response == "Y" || response == "y") {
                                addToInventory(newItem);
                            }
                        }
                    }
                }
            }

              displayInventory();
        std::cout << "Current XP: " << xp << std::endl;
        std::cout << "Press Enter to continue to the next planet...";
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::cin.get();
        }
    };
    
    
    
    






class mainMenu{
    public:
    void printMenu(){
        std::cout << " \n Welcome \n Press 1 For New Game \n Press 2 For Saved Game \n Press 3 For Settings \n Press 4 For Developer Tools \n";
    }
};

class newGameStart{
    public:
    bool printStartOptions(){
        // make sure to clear the screen before this next line.
        //break
       clearConsole();  // Clear the screen before displaying the menu

        int selectedShip = 0;
        std::string shipNames[] = {"The Hyperbole", "The Riser-2", "The Sunrise", "Newark", "Winona"};
        std::string shipDescriptions[] = {
            "Fast, Nimble, Light Armor, Machine Guns.",
            "Strong Shields, Laser Cannons, Slow, Hard To Turn",
            "Medium Shields, Overpowered Engines, Small Cannons, Normally Slow",
            "Quick, Small, Fast Engines, Light Guns",
            "Laser Cannons, Fast Engines, No Shields, Quick"
        };

        while (true) {
            std::cout << "\n---------->>> STARTING <<<-----------\n";
            std::cout << "Press 1 Through 5 To Choose Your Starting Ship\n\n";

            for (int i = 0; i < 5; i++) {
                std::cout << i + 1 << ": " << shipNames[i] << " - " << shipDescriptions[i] << "\n";
            }

            std::cout << "\nPlease Select A Ship (1-5) or 0 to Exit: ";
            std::string input;
            std::cin >> input;

            if (input == "0") {
                std::cout << "Exiting ship selection...\n";
                delay(2);
                return false;
                break;
            }

            try {
                selectedShip = std::stoi(input);
                if (selectedShip >= 1 && selectedShip <= 5) {
                    std::cout << "\nYou have selected: " << shipNames[selectedShip - 1] << "\n";
                    std::cout << "Confirm selection? (Y/N): ";
                    std::cin >> input;
                    if (input == "Y" || input == "y") {
                        std::cout << "Ship confirmed! Preparing for launch...\n";
                        delay(2);
                        return true;
                        break;
                    }
                } else {
                    std::cout << "Invalid selection. Please choose a number between 1 and 5.\n";
                }
            } catch (std::invalid_argument&) {
                std::cout << "Invalid input. Please enter a number.\n";
            }

            delay(2);  // Short delay before refreshing the menu
            clearConsole();
        }
    }
};


//break-------------------------------
class GameManager {
private:  
    mainMenu menu;
    newGameStart gameStart;
    gameNumber game;

public:  
    void run() {
        while (true) {
            clearConsole();
            menu.printMenu();
            
            std::string mainMenuPrint;
            std::cin >> mainMenuPrint;
            
            try {
                int choice = std::stoi(mainMenuPrint);
                
                switch(choice) {
                    case 1: 
                        if (gameStart.printStartOptions()) {
                            std::cout << "Starting the game...\n";
                            delay(2);
                            game.mainGameLoop(); // Start the main game loop
                            return; // Exit the function after the game ends
                        }
                        break;
                    case 2: 
                        std::cout << "Loading saved game...\n";
                        // Add code for loading a saved game
                        break;
                    case 3: 
                        std::cout << "Opening settings...\n";
                        // Add code for settings
                        break;
                    case 4: 
                        std::cout << "Accessing developer tools...\n";
                        // Add code for developer tools
                        break;
                    default: 
                        std::cout << "Invalid option. Please enter a number between 1 and 4.\n";
                }
            } catch (const std::invalid_argument& e) {
                std::cout << "Invalid input. Please enter a number.\n";
            } catch (const std::out_of_range& e) {
                std::cout << "Input out of range. Please enter a number between 1 and 4.\n";
            }
            
            delay(2); // Short delay before showing the menu again
        }
    }
};

class intro{
    public:
    void printIntro(){
        std::cout << "Skipping intro...\n";
        delay(2);
    }
    void printSkippedIntro(){
         std::cout << "Continuing with intro in 3 seconds...\n";
        delay(3);
        
        // Intro code starts here
        std::cout << "Starting Intro sequence...\n";
        delay(1);
        std::cout << "Preparing for launch...\n";
        delay(1);
        std::cout << "Welcome, in this game, the W,A,S,D, keys will control your spacecraft. \n The number keys will control your 10 inventory slots. \n";
        delay(1);
        std::cout << "To fire a weapon, you can press the F key. To drop bombs, you can press the B key.\n";
        delay(1);
        std::cout << "Get Ready For Liftoff! \n \n";
        delay(1);
        std::cout << "You Are A Space Explorer. You Pilot Your Trusty Ships With The Help Of The Outo Computer.\n";
        std::cout << "You Will Start As A Cadet And Slowly Make Your Way To General In The Space Alliance! \n";
        delay(1);
        std::cout << "When You Get To A Planet, Outo Will Ask You What You Want To Do.\n";
        std::cout << "Occasionally, You Will Be Greeted By Alien Ships. When This Happens, Quick Timing Is Key!\n";
        delay(1);
        
        //Break
        clearConsole();
        
        std::cout << "Make Sure To Resize Your Game Console Window To The Center Of The Screen\n \n";
        delay(1);
        std::cout << "I Can't Stay Long.... Good Luck Cadet. \n We All Depend On You. \n Liftoff In: \n";
        delay(1);
        std::cout << "3...\n";
        delay(1);
        std::cout << "2...\n";
        delay(1);
        std::cout << "1...\n";
        delay(1);
        //break
        clearConsole();
        //break
        std::cout << "*Welcome To Space! I'm Outo The Computer. Lets Go!!! \n";
        delay(3);
        // Intro code ends here
    }
    void printMainIntro(){
        std::cout << "Downloading....\n" << std::endl;
    
    delay(1);
    
    std::cout << "Awaiting Input: \n" << std::endl;
    
    delay(1);
    
    std::string input;
    std::cin >> input;
    
    std::cout << "Starting: " << input << std::endl;
   // std::string str = g_tools.toupperstring(input);
    delay(1);
    //std::cout << str << "\n";
    //delay(1);
    std::cout << "\n Welcome To STELLER-SHIP!!!\n" << std::endl;
    std::cout << "Press 'Y' and enter if you wish to skip the Intro. If not, press any other key and hit enter! Space Exploration Awaits!\n";
    }
};

tools g_tools;
intro g_intro;
// Function to create a delay 


int main() {
    g_intro.printMainIntro();
    
    std::string skipIntro;
    std::cin >> skipIntro;

    if (skipIntro == "Y" || skipIntro == "y") {
        g_intro.printIntro();
    } else {
       g_intro.printSkippedIntro();
    }

    std::cout << "Welcome aboard the STELLER-SHIP! Your space adventure begins now!\n";
    
    GameManager gameManager;
    gameManager.run();
    
    return 0;
}
